# -*- coding: utf-8 -*-
"""Untitled19.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1t3AUh8Z120T6E5-IYHBUSpK4Rl0gzM2J
"""

import matplotlib.pyplot as plt
import numpy as np

def quadratic_model(time):
    # Hard-coded coefficients for the quadratic equation
    a = 0.1
    b = -1
    c = 30

    # Quadratic equation representing temperature change
    temperature = a * (time ** 2) + b * time + c
    return temperature

def main():
    # Time values from 0 to 10 (for example)
    time_values = np.linspace(0, 10, 50)

    # Calculate temperatures using hard-coded coefficients
    temperature_hardcoded = quadratic_model(time_values)

    # Plot the results
    plt.plot(time_values, temperature_hardcoded, label='Hard-coded Coefficients')
    plt.xlabel('Time')
    plt.ylabel('Temperature')
    plt.legend()
    plt.title('Weather Modeling with Quadratic Equation (Hard-coded Coefficients)')
    plt.show()

if __name__ == "__main__":
  main()

import matplotlib.pyplot as plt
import numpy as np

def quadratic_model(time, a, b, c):
    # Quadratic equation representing temperature change
    temperature = a * (time ** 2) + b * time + c
    return temperature

def main():
    # Hard-coded coefficients for the quadratic equation
    a = 0.1
    b = -1
    c = 30

    # Time values from 0 to 10 (for example)
    time_values = np.linspace(0, 10, 100)

    # Calculate temperatures using hard-coded coefficients
    temperature_hardcoded = quadratic_model(time_values, a, b, c)

    # Plot the results
    plt.plot(time_values, temperature_hardcoded, label='Hard-coded Coefficients')
    plt.xlabel('Time')
    plt.ylabel('Temperature')
    plt.legend()
    plt.title('Weather Modeling with Quadratic Equation (Hard-coded Coefficients)')
    plt.show()

if __name__ == "__main__":
    main()

import matplotlib.pyplot as plt
import numpy as np

def quadratic_temperature_model(time, a, b, c):
    # Quadratic equation: T(t) = at^2 + bt + c
    temperature = a * (time ** 2) + b * time + c
    return temperature

# Get user input for coefficients
a = float(input("Enter the coefficient for the quadratic term (a): "))
b = float(input("Enter the coefficient for the linear term (b): "))
c = float(input("Enter the constant term (c): "))

# Generate time values from 0 to 50 with step 1
time_values = np.arange(0, 51, 1)

# Calculate temperature values using the quadratic model
temperature_values = quadratic_temperature_model(time_values, a, b, c)

# Plotting the results
plt.plot(time_values, temperature_values, label='Temperature Model')
plt.xlabel('Time')
plt.ylabel('Temperature')
plt.title('Quadratic Temperature Model')
plt.legend()
plt.grid(True)
plt.show()